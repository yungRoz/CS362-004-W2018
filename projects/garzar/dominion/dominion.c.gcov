        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      182:    9:  if (*(int*)a > *(int*)b)
        2:   10:    return 1;
      180:   11:  if (*(int*)a < *(int*)b)
       63:   12:    return -1;
      117:   13:  return 0;
      182:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    #####:   65:        }
    #####:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    #####:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    #####:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    #####:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    #####:  130:	}
        -:  131:
    #####:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
    #####:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
    #####:  150:	}
    #####:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    #####:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    #####:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
    #####:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
    #####:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
    #####:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       23:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       23:  209:  if (state->deckCount[player] < 1)
        8:  210:    return -1;
       15:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      300:  214:  while (state->deckCount[player] > 0) {
      135:  215:    card = floor(Random() * state->deckCount[player]);
      135:  216:    newDeck[newDeckPos] = state->deck[player][card];
      135:  217:    newDeckPos++;
      978:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      354:  219:      state->deck[player][i] = state->deck[player][i+1];
      354:  220:    }
      135:  221:    state->deckCount[player]--;
        -:  222:  }
      300:  223:  for (i = 0; i < newDeckPos; i++) {
      135:  224:    state->deck[player][i] = newDeck[i];
      135:  225:    state->deckCount[player]++;
      135:  226:  }
        -:  227:
       15:  228:  return 0;
       23:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
        3:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
       22:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        9:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        8:  401:  j = 0;
      416:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      200:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        9:  406:	  j++;
        9:  407:	}
      200:  408:    }
        8:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        7:  414:  return 0;
        9:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        5:  420:  int score = 0;
        -:  421:  //score from hand
      100:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
       54:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
       54:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
       54:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
       54:  427:      if (state->hand[player][i] == province) { score = score + 6; };
       54:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       45:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       45:  430:    }
        -:  431:
        -:  432:  //score from discard
      100:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
       54:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
       54:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
       54:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
       54:  438:      if (state->discard[player][i] == province) { score = score + 6; };
       54:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       45:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       45:  441:    }
        -:  442:
        -:  443:  //score from deck
      100:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
       54:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
       54:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
       54:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
       54:  449:      if (state->deck[player][i] == province) { score = score + 6; };
       54:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       45:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       45:  452:    }
        -:  453:
        5:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       26:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       40:  533:    for (i = 0; i < state->discardCount[player];i++){
       15:  534:      state->deck[player][i] = state->discard[player][i];
       15:  535:      state->discard[player][i] = -1;
       15:  536:    }
        -:  537:
        5:  538:    state->deckCount[player] = state->discardCount[player];
        5:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        5:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        5:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        5:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        5:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        5:  559:    if (deckCounter == 0)
        2:  560:      return -1;
        -:  561:
        3:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  563:    state->deckCount[player]--;
        3:  564:    state->handCount[player]++;//Increment hand count
        3:  565:  }
        -:  566:
        -:  567:  else{
       21:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       21:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       21:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       21:  576:    state->deckCount[player]--;
       21:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       24:  580:  return 0;
       26:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
       34:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        4:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        2:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        1:  643:  return -1;
       34:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       11:  653:  int currentPlayer = whoseTurn(state);
       11:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       11:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:  //int drawntreasure=0;
        -:  659:  //int cardDrawn;
        -:  660:  //int z = 0;// this is the counter for the temp hand
       11:  661:  if (nextPlayer > (state->numPlayers - 1)){
       11:  662:    nextPlayer = 0;
       11:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
       11:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
        4:  670:      return adventurerEffect(state);
        -:  671:
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    #####:  675:      for (i = 0; i < 4; i++)
        -:  676:	{
    #####:  677:	  drawCard(currentPlayer, state);
    #####:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
    #####:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
    #####:  684:      for (i = 0; i < state->numPlayers; i++)
        -:  685:	{
    #####:  686:	  if ( i != currentPlayer )
        -:  687:	    {
    #####:  688:	      drawCard(i, state);
    #####:  689:	    }
    #####:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
    #####:  693:      discardCard(handPos, currentPlayer, state, 0);
        -:  694:			
    #####:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
        -:  698:      //gain card with cost up to 5
        -:  699:      //Backup hand
    #####:  700:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  701:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  703:      }
        -:  704:      //Backup hand
        -:  705:
        -:  706:      //Update Coins for Buy
    #####:  707:      updateCoins(currentPlayer, state, 5);
    #####:  708:      x = 1;//Condition to loop on
    #####:  709:      while( x == 1) {//Buy one card
    #####:  710:	if (supplyCount(choice1, state) <= 0){
        -:  711:	  if (DEBUG)
        -:  712:	    printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:	  }
    #####:  717:	}
    #####:  718:	else if (state->coins < getCost(choice1)){
    #####:  719:	  printf("That card is too expensive!\n");
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:	  }
    #####:  724:	}
        -:  725:	else{
        -:  726:
        -:  727:	  if (DEBUG){
        -:  728:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:	  }
        -:  730:
    #####:  731:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:	  x = 0;//No more buying cards
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
        -:  738:	}
        -:  739:      }     
        -:  740:
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  743:	state->hand[currentPlayer][i] = temphand[i];
    #####:  744:	temphand[i] = -1;
    #####:  745:      }
        -:  746:      //Reset Hand
        -:  747:      			
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case gardens:
    #####:  751:      return -1;
        -:  752:			
        -:  753:    case mine:
    #####:  754:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  757:	{
    #####:  758:	  return -1;
        -:  759:	}
        -:  760:		
    #####:  761:      if (choice2 > treasure_map || choice2 < curse)
        -:  762:	{
    #####:  763:	  return -1;
        -:  764:	}
        -:  765:
    #####:  766:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      gainCard(choice2, state, 2, currentPlayer);
        -:  772:
        -:  773:      //discard card from hand
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
        -:  776:      //discard trashed card
    #####:  777:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  778:	{
    #####:  779:	  if (state->hand[currentPlayer][i] == j)
        -:  780:	    {
    #####:  781:	      discardCard(i, currentPlayer, state, 0);			
    #####:  782:	      break;
        -:  783:	    }
    #####:  784:	}
        -:  785:			
    #####:  786:      return 0;
        -:  787:			
        -:  788:    case remodel:
        3:  789:      return remodelEffect(choice1, choice2, choice3, state, handPos);
        -:  790:		
        -:  791:    case smithy:
        2:  792:      return smithyEffect(state, handPos);
        -:  793:		
        -:  794:    case village:
        -:  795:      	    
        2:  796:      return villageEffect(state, handPos);
        -:  797:    
        -:  798:    case baron:
    #####:  799:      return baronEffect(choice1, state);
        -:  800:            
        -:  801:    case great_hall:
        -:  802:      //+1 Card
    #####:  803:      drawCard(currentPlayer, state);
        -:  804:			
        -:  805:      //+1 Actions
    #####:  806:      state->numActions++;
        -:  807:			
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case minion:
        -:  813:      //+1 action
    #####:  814:      state->numActions++;
        -:  815:			
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
        -:  818:			
    #####:  819:      if (choice1)		//+2 coins
        -:  820:	{
    #####:  821:	  state->coins = state->coins + 2;
    #####:  822:	}
        -:  823:			
    #####:  824:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  825:	{
        -:  826:	  //discard hand
    #####:  827:	  while(numHandCards(state) > 0)
        -:  828:	    {
    #####:  829:	      discardCard(handPos, currentPlayer, state, 0);
        -:  830:	    }
        -:  831:				
        -:  832:	  //draw 4
    #####:  833:	  for (i = 0; i < 4; i++)
        -:  834:	    {
    #####:  835:	      drawCard(currentPlayer, state);
    #####:  836:	    }
        -:  837:				
        -:  838:	  //other players discard hand and redraw if hand size > 4
    #####:  839:	  for (i = 0; i < state->numPlayers; i++)
        -:  840:	    {
    #####:  841:	      if (i != currentPlayer)
        -:  842:		{
    #####:  843:		  if ( state->handCount[i] > 4 )
        -:  844:		    {
        -:  845:		      //discard hand
    #####:  846:		      while( state->handCount[i] > 0 )
        -:  847:			{
    #####:  848:			  discardCard(handPos, i, state, 0);
        -:  849:			}
        -:  850:							
        -:  851:		      //draw 4
    #####:  852:		      for (j = 0; j < 4; j++)
        -:  853:			{
    #####:  854:			  drawCard(i, state);
    #####:  855:			}
    #####:  856:		    }
    #####:  857:		}
    #####:  858:	    }
        -:  859:				
    #####:  860:	}
    #####:  861:      return 0;
        -:  862:		
        -:  863:    case steward:
    #####:  864:      if (choice1 == 1)
        -:  865:	{
        -:  866:	  //+2 cards
    #####:  867:	  drawCard(currentPlayer, state);
    #####:  868:	  drawCard(currentPlayer, state);
    #####:  869:	}
    #####:  870:      else if (choice1 == 2)
        -:  871:	{
        -:  872:	  //+2 coins
    #####:  873:	  state->coins = state->coins + 2;
    #####:  874:	}
        -:  875:      else
        -:  876:	{
        -:  877:	  //trash 2 cards in hand
    #####:  878:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  879:	  discardCard(choice3, currentPlayer, state, 1);
        -:  880:	}
        -:  881:			
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case tribute:
    #####:  887:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  888:	if (state->deckCount[nextPlayer] > 0){
    #####:  889:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  890:	  state->deckCount[nextPlayer]--;
    #####:  891:	}
    #####:  892:	else if (state->discardCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  894:	  state->discardCount[nextPlayer]--;
    #####:  895:	}
        -:  896:	else{
        -:  897:	  //No Card to Reveal
        -:  898:	  if (DEBUG){
        -:  899:	    printf("No cards to reveal\n");
        -:  900:	  }
        -:  901:	}
    #####:  902:      }
        -:  903:	    
        -:  904:      else{
    #####:  905:	if (state->deckCount[nextPlayer] == 0){
    #####:  906:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  907:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  908:	    state->deckCount[nextPlayer]++;
    #####:  909:	    state->discard[nextPlayer][i] = -1;
    #####:  910:	    state->discardCount[nextPlayer]--;
    #####:  911:	  }
        -:  912:			    
    #####:  913:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  914:	} 
    #####:  915:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
    #####:  918:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  919:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  920:	state->deckCount[nextPlayer]--;
        -:  921:      }    
        -:  922:		       
    #####:  923:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  924:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  925:	state->playedCardCount++;
    #####:  926:	tributeRevealedCards[1] = -1;
    #####:  927:      }
        -:  928:
    #####:  929:      for (i = 0; i <= 2; i ++){
    #####:  930:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  931:	  state->coins += 2;
    #####:  932:	}
        -:  933:		    
    #####:  934:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  935:	  drawCard(currentPlayer, state);
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	}
        -:  938:	else{//Action Card
    #####:  939:	  state->numActions = state->numActions + 2;
        -:  940:	}
    #####:  941:      }
        -:  942:	    
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case ambassador:
    #####:  946:      j = 0;		//used to check if player has enough cards to discard
        -:  947:
    #####:  948:      if (choice2 > 2 || choice2 < 0)
        -:  949:	{
    #####:  950:	  return -1;				
        -:  951:	}
        -:  952:
    #####:  953:      if (choice1 == handPos)
        -:  954:	{
    #####:  955:	  return -1;
        -:  956:	}
        -:  957:
    #####:  958:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  959:	{
    #####:  960:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  961:	    {
    #####:  962:	      j++;
    #####:  963:	    }
    #####:  964:	}
    #####:  965:      if (j < choice2)
        -:  966:	{
    #####:  967:	  return -1;				
        -:  968:	}
        -:  969:
        -:  970:      if (DEBUG) 
        -:  971:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  972:
        -:  973:      //increase supply count for choosen card by amount being discarded
    #####:  974:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  975:			
        -:  976:      //each other player gains a copy of revealed card
    #####:  977:      for (i = 0; i < state->numPlayers; i++)
        -:  978:	{
    #####:  979:	  if (i != currentPlayer)
        -:  980:	    {
    #####:  981:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  982:	    }
    #####:  983:	}
        -:  984:
        -:  985:      //discard played card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);			
        -:  987:
        -:  988:      //trash copies of cards returned to supply
    #####:  989:      for (j = 0; j < choice2; j++)
        -:  990:	{
    #####:  991:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  992:	    {
    #####:  993:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  994:		{
    #####:  995:		  discardCard(i, currentPlayer, state, 1);
    #####:  996:		  break;
        -:  997:		}
    #####:  998:	    }
    #####:  999:	}			
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case cutpurse:
        -: 1004:
    #####: 1005:      updateCoins(currentPlayer, state, 2);
    #####: 1006:      for (i = 0; i < state->numPlayers; i++)
        -: 1007:	{
    #####: 1008:	  if (i != currentPlayer)
        -: 1009:	    {
    #####: 1010:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1011:		{
    #####: 1012:		  if (state->hand[i][j] == copper)
        -: 1013:		    {
    #####: 1014:		      discardCard(j, i, state, 0);
    #####: 1015:		      break;
        -: 1016:		    }
    #####: 1017:		  if (j == state->handCount[i])
        -: 1018:		    {
    #####: 1019:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1020:			{
        -: 1021:			  if (DEBUG)
        -: 1022:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1023:			}	
    #####: 1024:		      break;
        -: 1025:		    }		
    #####: 1026:		}
        -: 1027:					
    #####: 1028:	    }
        -: 1029:				
    #####: 1030:	}				
        -: 1031:
        -: 1032:      //discard played card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:
        -: 1037:		
        -: 1038:    case embargo: 
        -: 1039:      //+2 Coins
    #####: 1040:      state->coins = state->coins + 2;
        -: 1041:			
        -: 1042:      //see if selected pile is in play
    #####: 1043:      if ( state->supplyCount[choice1] == -1 )
        -: 1044:	{
    #####: 1045:	  return -1;
        -: 1046:	}
        -: 1047:			
        -: 1048:      //add embargo token to selected supply pile
    #####: 1049:      state->embargoTokens[choice1]++;
        -: 1050:			
        -: 1051:      //trash card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case outpost:
        -: 1056:      //set outpost flag
    #####: 1057:      state->outpostPlayed++;
        -: 1058:			
        -: 1059:      //discard card
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case salvager:
        -: 1064:      //+1 buy
    #####: 1065:      state->numBuys++;
        -: 1066:			
    #####: 1067:      if (choice1)
        -: 1068:	{
        -: 1069:	  //gain coins equal to trashed card
    #####: 1070:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1071:	  //trash card
    #####: 1072:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1073:	}
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case sea_hag:
    #####: 1080:      for (i = 0; i < state->numPlayers; i++){
    #####: 1081:	if (i != currentPlayer){
    #####: 1082:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1083:	  state->discardCount[i]++;
    #####: 1084:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1085:	}
    #####: 1086:      }
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case treasure_map:
        -: 1090:      //search hand for another treasure_map
    #####: 1091:      index = -1;
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1095:	    {
    #####: 1096:	      index = i;
    #####: 1097:	      break;
        -: 1098:	    }
    #####: 1099:	}
    #####: 1100:      if (index > -1)
        -: 1101:	{
        -: 1102:	  //trash both treasure cards
    #####: 1103:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1104:	  discardCard(index, currentPlayer, state, 1);
        -: 1105:
        -: 1106:	  //gain 4 Gold cards
    #####: 1107:	  for (i = 0; i < 4; i++)
        -: 1108:	    {
    #####: 1109:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1110:	    }
        -: 1111:				
        -: 1112:	  //return success
    #####: 1113:	  return 1;
        -: 1114:	}
        -: 1115:			
        -: 1116:      //no second treasure_map found in hand
    #####: 1117:      return -1;
        -: 1118:    }
        -: 1119:	
    #####: 1120:  return -1;
       11: 1121:}
        -: 1122:
        -: 1123:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1124:{
        -: 1125:	
        -: 1126:  //if card is not trashed, added to Played pile 
        7: 1127:  if (trashFlag < 1)
        -: 1128:    {
        -: 1129:      //add card to played pile
        7: 1130:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        7: 1131:      state->playedCardCount++;
        7: 1132:    }
        -: 1133:	
        -: 1134:  //set played card to -1
        7: 1135:  state->hand[currentPlayer][handPos] = -1;
        -: 1136:	
        -: 1137:  //remove card from player's hand
        7: 1138:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1139:    {
        -: 1140:      //reduce number of cards in hand
    #####: 1141:      state->handCount[currentPlayer]--;
    #####: 1142:    }
        7: 1143:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1144:    {
        -: 1145:      //reduce number of cards in hand
    #####: 1146:      state->handCount[currentPlayer]--;
    #####: 1147:    }
        -: 1148:  else 	
        -: 1149:    {
        -: 1150:      //replace discarded card with last card in hand
        7: 1151:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1152:      //set last card to -1
        7: 1153:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1154:      //reduce number of cards in hand
        7: 1155:      state->handCount[currentPlayer]--;
        -: 1156:    }
        -: 1157:	
        7: 1158:  return 0;
        -: 1159:}
        -: 1160:
        -: 1161:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1162:{
        -: 1163:  //Note: supplyPos is enum of choosen card
        -: 1164:	
        -: 1165:  //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1166:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1167:    {
        3: 1168:      return -1;
        -: 1169:    }
        -: 1170:	
        -: 1171:  //added card for [whoseTurn] current player:
        -: 1172:  // toFlag = 0 : add to discard
        -: 1173:  // toFlag = 1 : add to deck
        -: 1174:  // toFlag = 2 : add to hand
        -: 1175:
    #####: 1176:  if (toFlag == 1)
        -: 1177:    {
    #####: 1178:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1179:      state->deckCount[player]++;
    #####: 1180:    }
    #####: 1181:  else if (toFlag == 2)
        -: 1182:    {
    #####: 1183:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1184:      state->handCount[player]++;
    #####: 1185:    }
        -: 1186:  else
        -: 1187:    {
    #####: 1188:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1189:      state->discardCount[player]++;
        -: 1190:    }
        -: 1191:	
        -: 1192:  //decrease number in supply pile
    #####: 1193:  state->supplyCount[supplyPos]--;
        -: 1194:	 
    #####: 1195:  return 0;
        3: 1196:}
        -: 1197:
        -: 1198:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1199:{
        -: 1200:  int i;
        -: 1201:	
        -: 1202:  //reset coin count
    #####: 1203:  state->coins = 0;
        -: 1204:
        -: 1205:  //add coins for each Treasure card in player's hand
    #####: 1206:  for (i = 0; i < state->handCount[player]; i++)
        -: 1207:    {
    #####: 1208:      if (state->hand[player][i] == copper)
        -: 1209:	{
    #####: 1210:	  state->coins += 1;
    #####: 1211:	}
    #####: 1212:      else if (state->hand[player][i] == silver)
        -: 1213:	{
    #####: 1214:	  state->coins += 2;
    #####: 1215:	}
    #####: 1216:      else if (state->hand[player][i] == gold)
        -: 1217:	{
    #####: 1218:	  state->coins += 3;
    #####: 1219:	}	
    #####: 1220:    }	
        -: 1221:
        -: 1222:  //add bonus
    #####: 1223:  state->coins += bonus;
        -: 1224:
    #####: 1225:  return 0;
        -: 1226:}
        -: 1227:
        -: 1228:int adventurerEffect(struct gameState *state){
        -: 1229:    //int i;
        -: 1230:    //int j;
        -: 1231:    //int k;
        -: 1232:    //int x;
        -: 1233:    //int index;
        4: 1234:    int currentPlayer = whoseTurn(state);
        4: 1235:    int nextPlayer = currentPlayer + 1;
        -: 1236:    
        -: 1237:    //int tributeRevealedCards[2] = {-1, -1};
        -: 1238:    int temphand[MAX_HAND];// moved above the if statement
        4: 1239:    int drawntreasure=0;
        -: 1240:    int cardDrawn;
        4: 1241:    int z = 0;// this is the counter for the temp hand
        4: 1242:    if (nextPlayer > (state->numPlayers - 1)){
        4: 1243:        nextPlayer = 0;
        4: 1244:    }
        -: 1245:    
        -: 1246:    
       40: 1247:    while(drawntreasure<2){
       16: 1248:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        4: 1249:            shuffle(currentPlayer, state);
        4: 1250:        }
       16: 1251:        drawCard(currentPlayer, state);
       16: 1252:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       32: 1253:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        8: 1254:            drawntreasure++;
        -: 1255:        else{
        8: 1256:            temphand[z]=cardDrawn;
        8: 1257:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        8: 1258:            z++;
        -: 1259:        }
        -: 1260:    }
       18: 1261:    while(z-1>0){
        5: 1262:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        5: 1263:        z=z-1;
        -: 1264:    }
        -: 1265:    
        4: 1266:    return 0;
        -: 1267:}
        -: 1268:int remodelEffect(int choice1, int choice2, int choice3, struct gameState *state, int handPos){
        -: 1269:    int i;
        -: 1270:    int j;
        -: 1271:    //int k;
        -: 1272:    //int x;
        -: 1273:    //int index;
        3: 1274:    int currentPlayer = whoseTurn(state);
        3: 1275:    int nextPlayer = currentPlayer + 1;
        -: 1276:    
        -: 1277:    //int tributeRevealedCards[2] = {-1, -1};
        -: 1278:    //int temphand[MAX_HAND];// moved above the if statement
        -: 1279:    //int drawntreasure=0;
        -: 1280:    //int cardDrawn;
        -: 1281:    //int z = 0;// this is the counter for the temp hand
        3: 1282:    if (nextPlayer > (state->numPlayers - 1)){
        3: 1283:        nextPlayer = 0;
        3: 1284:    }
        -: 1285:    
        3: 1286:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1287:    
        3: 1288:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1289:    {
    #####: 1290:        return -1;
        -: 1291:    }
        -: 1292:    
        3: 1293:    gainCard(choice3, state, 0, currentPlayer);
        -: 1294:    
        -: 1295:    //discard card from hand
        3: 1296:    discardCard(handPos, currentPlayer, state, 0);
        -: 1297:    
        -: 1298:    //discard trashed card
       42: 1299:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1300:    {
       18: 1301:        if (state->hand[currentPlayer][i] == j)
        -: 1302:        {
    #####: 1303:            discardCard(i, currentPlayer, state, 0);
    #####: 1304:            break;
        -: 1305:        }
       18: 1306:    }
        -: 1307:    
        -: 1308:    
        3: 1309:    return 0;
        -: 1310:    
        3: 1311:}
        -: 1312:int smithyEffect(struct gameState *state, int handPos){
        -: 1313:    int i;
        -: 1314:    //int j;
        -: 1315:    //int k;
        -: 1316:    //int x;
        -: 1317:    //int index;
        2: 1318:    int currentPlayer = whoseTurn(state);
        2: 1319:    int nextPlayer = currentPlayer + 1;
        -: 1320:    
        -: 1321:    //int tributeRevealedCards[2] = {-1, -1};
        -: 1322:    //int temphand[MAX_HAND];// moved above the if statement
        -: 1323:    //int drawntreasure=0;
        -: 1324:    //int cardDrawn;
        -: 1325:    //int z = 0;// this is the counter for the temp hand
        2: 1326:    if (nextPlayer > (state->numPlayers - 1)){
        2: 1327:        nextPlayer = 0;
        2: 1328:    }
        -: 1329:    
        -: 1330:    //+3 Cards
       20: 1331:    for (i = 0; i <= 3; i++)
        -: 1332:    {
        8: 1333:        drawCard(currentPlayer, state);
        8: 1334:    }
        -: 1335:    
        -: 1336:    //discard card from hand
        2: 1337:    discardCard(handPos, currentPlayer, state, 0);
        -: 1338:    
        2: 1339:    return 0;
        -: 1340:    
        -: 1341:}
        -: 1342:int villageEffect(struct gameState *state, int handPos){
        -: 1343:    //int i;
        -: 1344:    //int j;
        -: 1345:    //int k;
        -: 1346:    //int x;
        -: 1347:    //int index;
        2: 1348:    int currentPlayer = whoseTurn(state);
        2: 1349:    int nextPlayer = currentPlayer + 1;
        -: 1350:    
        -: 1351:    //int tributeRevealedCards[2] = {-1, -1};
        -: 1352:    //int temphand[MAX_HAND];// moved above the if statement
        -: 1353:    //int drawntreasure=0;
        -: 1354:    //int cardDrawn;
        -: 1355:    //int z = 0;// this is the counter for the temp hand
        2: 1356:    if (nextPlayer > (state->numPlayers - 1)){
        2: 1357:        nextPlayer = 0;
        2: 1358:    }
        -: 1359:    
        -: 1360:    //+1 Card
        2: 1361:    drawCard(currentPlayer, state);
        -: 1362:    
        -: 1363:    //+2 Actions
        2: 1364:    state->numActions = state->numActions + 1;
        -: 1365:    
        -: 1366:    //discard played card from hand
        2: 1367:    discardCard(handPos, currentPlayer, state, 0);
        2: 1368:    return 0;
        -: 1369:    
        -: 1370:}
        -: 1371:
        -: 1372:int baronEffect(int choice1, struct gameState *state){
        -: 1373:    //int i;
        -: 1374:    //int j;
        -: 1375:    //int k;
        -: 1376:    //int x;
        -: 1377:    //int index;
    #####: 1378:    int currentPlayer = whoseTurn(state);
    #####: 1379:    int nextPlayer = currentPlayer + 1;
        -: 1380:    
        -: 1381:    //int tributeRevealedCards[2] = {-1, -1};
        -: 1382:    //int temphand[MAX_HAND];// moved above the if statement
        -: 1383:    //int drawntreasure=0;
        -: 1384:    //int cardDrawn;
        -: 1385:    //int z = 0;// this is the counter for the temp hand
    #####: 1386:    if (nextPlayer > (state->numPlayers - 1)){
    #####: 1387:        nextPlayer = 0;
    #####: 1388:    }
        -: 1389:    
    #####: 1390:    state->numBuys++;//Increase buys by 1!
    #####: 1391:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1392:        int p = 0;//Iterator for hand!
    #####: 1393:        int card_not_discarded = 1;//Flag for discard set!
    #####: 1394:        while(card_not_discarded){
    #####: 1395:            if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1396:                state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1397:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1398:                state->discardCount[currentPlayer]++;
    #####: 1399:                for (;p < state->handCount[currentPlayer]; p++){
    #####: 1400:                    state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1401:                }
    #####: 1402:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1403:                state->handCount[currentPlayer]--;
    #####: 1404:                card_not_discarded = 0;//Exit the loop
    #####: 1405:            }
    #####: 1406:            else if (p > state->handCount[currentPlayer]){
        -: 1407:                if(DEBUG) {
        -: 1408:                    printf("No estate cards in your hand, invalid choice\n");
        -: 1409:                    printf("Must gain an estate if there are any\n");
        -: 1410:                }
    #####: 1411:                if (supplyCount(estate, state) > 0){
    #####: 1412:                    gainCard(estate, state, 0, currentPlayer);
    #####: 1413:                    state->supplyCount[estate]--;//Decrement estates
    #####: 1414:                    if (supplyCount(estate, state) == 0){
    #####: 1415:                        isGameOver(state);
    #####: 1416:                    }
    #####: 1417:                }
    #####: 1418:                card_not_discarded = 0;//Exit the loop
    #####: 1419:            }
        -: 1420:            
        -: 1421:            else{
    #####: 1422:                p++;//Next card
        -: 1423:            }
        -: 1424:        }
    #####: 1425:    }
        -: 1426:    
        -: 1427:    else{
    #####: 1428:        if (supplyCount(estate, state) > 0){
    #####: 1429:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1430:            state->supplyCount[estate]--;//Decrement Estates
    #####: 1431:            if (supplyCount(estate, state) == 0){
    #####: 1432:                isGameOver(state);
    #####: 1433:            }
    #####: 1434:        }
        -: 1435:    }
        -: 1436:    
    #####: 1437:    return 0;
        -: 1438:    
        -: 1439:}
        -: 1440:
        -: 1441:
        -: 1442://end of dominion.c
        -: 1443:
